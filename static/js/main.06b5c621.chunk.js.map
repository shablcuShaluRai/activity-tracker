{"version":3,"sources":["Modal/ActivityTable.js","Modal/index.js","UserList/index.js","App.js","index.js"],"names":["headers","DashboardHeader","key","uuid","map","header","className","DashboardBody","bodies","length","body","index","startDate","moment","start_time","endDate","end_time","date","format","startTime","endTime","result","duration","diff","hrs","hours","min","minutes","colSpan","ActivityTable","Modal","selectedUser","toggle","activityPeriod","useState","setStartDate","filter","acf","selectedDate","parseStartDate","parseSelectedDate","isSame","dateIsSame","selected","onChange","placeholderText","maxDate","now","onClick","UserList","userListData","setUserList","open","setSelectedUser","a","fetch","response","json","data","members","useEffect","getUserData","id","real_name","tz","activity_periods","alt","src","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b5c621.chunk.js","sourcesContent":["import React from \"react\"\nimport uuid from \"uuid\"\nimport moment from \"moment\"\n\nconst headers = [\"Date\", \"Start Time\", \"End Time\", \"Activity Duration\"]\n\nconst DashboardHeader = () => (\n  <thead key={uuid()}>\n    <tr>\n      {headers.map(header => (\n        <th key={uuid()} className=\"header-text\">\n          {header}\n        </th>\n      ))}\n    </tr>\n  </thead>\n)\n\nconst DashboardBody = ({ bodies }) => {\n  return (\n    <tbody>\n      {bodies.length > 0 ?\n        bodies.map((body, index) => {\n          const startDate = moment(body.start_time, \"MMM DD YYYY hh:mmA\")\n          const endDate = moment(body.end_time, \"MMM DD YYYY hh:mmA\")\n          const date = startDate.format(\"MMM DD YYYY\")\n          const startTime = startDate.format(\"hh:mm A\")\n          const endTime = endDate.format(\"hh:mm A\")\n          const result = moment.duration(endDate.diff(startDate))\n          const hrs = result.hours()\n          const min = result.minutes()\n          return (\n            <tr key={`activity-tracker${index}`}>\n              <td>{date}</td>\n              <td>{startTime}</td>\n              <td>{endTime}</td>\n              <td>{hrs > 0 ? `${hrs} h ${min} m` : `${min} m`}</td>\n            </tr>\n          )\n        })\n        : (\n          <tr>\n            <td colSpan=\"5\">No Record found</td>\n          </tr>\n        )\n      \n      }\n    </tbody>\n  )\n}\n\nconst ActivityTable = ({ bodies }) => (\n  <table>\n    <DashboardHeader />\n    <DashboardBody bodies={bodies} />\n  </table>\n)\n\nexport default ActivityTable\n","import React, { useState } from \"react\"\nimport moment from \"moment\"\nimport DatePicker from \"react-datepicker\"\nimport ActivityTable from \"./ActivityTable\"\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport \"./modal.css\"\n\nfunction dateIsSame(selectedDate, startDate) {\n  let parseStartDate = moment(startDate, \"MMM DD YYYY\")\n  let parseSelectedDate = moment(selectedDate, \"MMM DD YYYY\")\n  const dateIsSame = moment(parseStartDate).isSame(moment(parseSelectedDate))\n  return dateIsSame\n}\n\nfunction Modal({ selectedUser, toggle }) {\n  const { activityPeriod } = selectedUser\n  const [startDate, setStartDate] = useState(\"\")\n  const result = startDate\n    ? activityPeriod.filter(acf => dateIsSame(startDate, acf.start_time))\n    : activityPeriod\n  return (\n    <div className=\"modal\">\n      <div className=\"modal_content\">\n        <div className=\"datepicker-container\">\n          <DatePicker\n            selected={startDate}\n            onChange={setStartDate}\n            placeholderText=\"MM/DD/YYYY\"\n            className=\"date-picker\"\n            maxDate={moment.now()}\n          />\n          <span className=\"close\" onClick={() => toggle(false)}>\n            &times;\n          </span>\n        </div>\n        <ActivityTable bodies={result} />\n      </div>\n    </div>\n  )\n}\n\nexport default Modal\n","import React, { useState, useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport \"./userList.css\"\n\nfunction UserList() {\n  const [userListData, setUserList] = useState([]);\n  const [open, toggle] = useState(false);\n  const [selectedUser, setSelectedUser] = useState({});\n\n  async function getUserData() {\n    const response = await fetch(\n      \"https://api.jsonbin.io/b/5f24f9bb6f8e4e3faf2823f2/3\"\n    );\n    const data = await response.json();\n    setUserList(data.members);\n  }\n\n  useEffect(() => {\n    getUserData();\n  }, []);\n\n  return (\n    <div className=\"userlist-container\">\n      {userListData &&\n        userListData.map(({ id, real_name, tz, activity_periods }) => (\n          <div\n            key={id}\n            className=\"userlist\"\n            onClick={() => {\n              setSelectedUser({ id, activityPeriod: activity_periods });\n              toggle(true);\n            }}\n          >\n            <img\n              alt={`alt ${real_name}`}\n              src={`https://robohash.org/galinda?set=set2`}\n            />\n            <p>{real_name}</p>\n            <p>{tz}</p>\n          </div>\n        ))}\n      {open && <Modal selectedUser={selectedUser} toggle={toggle} />}\n    </div>\n  );\n}\n\nexport default UserList;\n","import React from \"react\";\nimport UserList from \"./UserList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Activity Tracker</h1>\n      <UserList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}